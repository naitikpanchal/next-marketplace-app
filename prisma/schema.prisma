generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Item {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  condition   String
  description String
  imageUrl    String
  name        String
  price       Int
  shipping    String
  userId      String? @db.ObjectId
  user        User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  
  CartItem    CartItem[]  

  @@map("marketplaceitems")
}


model Cart{
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  items       CartItem[]
  userId      String? @db.ObjectId
  user        User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("carts")
}



model CartItem{
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  itemId      String @db.ObjectId
  item        Item @relation(fields: [itemId], references: [id], onDelete: Cascade)
  quantity    Int
  cartId      String @db.ObjectId
  cart        Cart @relation(fields: [cartId], references: [id], onDelete: Cascade)//changed onDelete Cascade

  @@map("cartitems")
}

model Session {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String  @db.ObjectId
  sessionToken String @unique
  expires   DateTime
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Account {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  type      String
  provider  String
  providerAccountId String
  refresh_token String? @db.String
  access_token String? @db.String
  expires_at Int?
  token_type String?
  scope     String?
  id_token   String?
  session_state String?
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  name     String?
  username String?
  firstName String?
  lastName String?
  city     String?
  email    String? @unique
  emailVerified DateTime?
  image    String?
  password String?
  phone    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  accounts Account[]
  sessions Session[]
  Cart    Cart[]
  Item    Item[]
  
  @@map("users")
}

model VerificationToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String @unique
  expires    DateTime
  
  @@unique([identifier, token])
  @@map("verificationtokens")
}